// Singing Bank //

Libraries:

osc-web can be used to send and receive osc with node.js

https://github.com/automata/osc-web

(so we can send notes from ableton etc. to webapp which could twitter or whatever)

---

Web Audio API can directly play sound data and actually directly synth sounds as well

Also, there is audiolib.js to make that easier https://github.com/jussi-kalliokoski/audiolib.js/#readme
(seems to have some problems in chrome, maybe needs newer version. firefox ok)

---

Lily is like puredata in firefox and can receive OSC

http://www.lilyapp.org

---

Midibridge is a java applet that allows midi access through javascript
It seems to implement a maybe-future brwoser midi api (proposed to w3c already)

http://abumarkub.net/abublog/?p=840

---

Jazzplugin is a plugin based approach

---

MIDI.js uses soundfonts and plays sound in the browser

http://mudcu.be/midi-js/

---
Node:

http://toolbox.no.de/packages/midi.io (only receive)
https://github.com/justinlatimer/node-midi (wrapper for RtMidi)
https://github.com/hanshuebner/midivent (wrapper for PortMidi)

(midi then only works only on the machine node is running on)

-------------------

OpenBank API Data, Numbers from [-∞, +∞] (json)
            |
            v
      Webapp (Node)
|           |                |
v           v                v
Midi     Soundfiles   Synth (WebAudio API)

----------------



1) Linux packages

sudo apt-get install npm
sudo apt-get install redis-server
sudo apt-get install mongodb-server


2) Node packages
Note: Edit package.json so dependancies will be installed using:

npm install

2b) Special cases.
In addition to 2) we need to:
npm install --mongodb:native



3) Start mongodb

	Start with 
		sudo mongod

4) Start redis

	Mac: Start with:
		sudo redis-server /opt/local/etc/redis.conf

	Ubuntu:
		sudo redis-server /etc/redis/redis.conf

	Note: We (try to!) store sessions in redis (may be *disabled* for now) which has the advantage that they are not lost due to a node restart

5) Start node

	NODE_ENV=simon node --debug app.js



//////////////////////////////////////////////////////////////////////////////////

To read up about the Node callback style of programming this:
http://shinetech.com/thoughts/articles/139-asynchronous-code-design-with-nodejs-
is a nice article.

http://blog.gvm-it.eu/post/22040726249/callback-conventions-in-node-js-how-and-why


/////////////////////

Apparently this is the expert way to start a node server:
See slide 35 here:

http://www.slideshare.net/the_undefined/nodejs-best-practices-10428790